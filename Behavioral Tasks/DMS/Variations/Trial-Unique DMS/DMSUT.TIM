// DMS.tim
//
// v.3 070703
// added ability to change size of fixation window within trial
//   using "+" & "-" keys; changes window in increments of 0.5 degrees;
//   pressing "0" sets fixation window to 20 degrees
// also fixed indents
//
// v.2 070518
// added "#define NONMATCHNUM 300" & "pencode(NONMATCHNUM + testnum);" 
//   to write number of intended nonmatching stimuli to data file
// added indents to make code easier to read
// nonmatches won't repeat more than twice each


#include "css_inc.h"
#include "encodes.h"

#define init_done           _int1   
#define my_trial_num        _int2
#define x                   _float1
#define y                   _float2

#define NUM_REWARDS                     5
#define ITI_TIME                        1000
#define REWARD_PAUSE_TIME               200

#define ITI_TIMER                       4
#define PAUSE_TIMER                     6
#define WAIT_TIMER                      9  //8 is used by plexon funcs!!!

#define ititim                          1000                 
#define waibar                          100000000000
#define waifix                          3000
#define required_fixation               300
#define stimtim                         500
#define deadtime                        150
#define maxrsptim                       750 
#define timeout                         250
#define timdelay                        500

/* Set maxtest to max # of nonmatching stimuli */
#define maxtest                         4

#define maxtestdum                      maxtest+2
#define minstim                         1
#define maxstim                         6

/* Plexon defs */
#define NOP                0     // No Operation encode.
#define TRUE               1
#define FALSE              0
#define USE_INPBSY         FALSE // True? False?
#define PLEXON_DEV         1     // device number as given by order listed cortex.cfg. The nth device is device number n-1
#define PLEXON_PORT_LSB    0x00  // output: low byte for plexon
#define PLEXON_PORT_MSB    0x01  // output: high byte (7 bits) for plexon
#define PLEXON_PORT_CTRL   0x02  // low bye (strobe output), hi byte (busy input)
#define ConfigPort         0x03  // Configures port for input and output, see below
#define PLEXON_STROBE_BIT  0x01  // Strobe bit (output)
#define PLEXON_STROBE_OFF  0x00  // Strobe bit off
#define PLEXON_DATA_ON     0x02  // keep high while recording data
#define PLEXON_DATA_OFF    0x00  // pause plexon data recording
#define PLEXON_INPBSY      0x10  // Busy Bit (input). bit mask used for determining state of plexon word read (busy or not)
#define PENCODE_TIMER      8   

#define BASE_TRIAL_NUM     5000
#define NONMATCHNUM        300

void do_keypress();
void do_iti();

/* plexon func predefs */
void pencode(int encode_number);
//void pdata(int toggle); //turn plexon data recording on/off [0/1]
void wait(int ms);

int cnd;
int blk;
int rant_1;
int rant_2;
int testnum;
int stimnum;
int stim1rep;
int stim2rep;
int stim3rep;
int stim4rep;
int stim5rep;
int prior_event_code;


main(){

  iti: {

    do_iti();
    if (init_done == 0) {
      init_done = 1;
      my_trial_num = 1;
      DEVoutp(PLEXON_DEV, ConfigPort, 0x88); /* configures A & B ports of the cio/dio24 card to output, upper C port is input, lower Cport is output */
      DEVoutp(PLEXON_DEV, PLEXON_PORT_CTRL, 0x00); /* sets pin 1 of PLEXON_PORT_CTRL (the strobe port) to zero */
    }

    clear_eog();
    display_eye_path(ON);
    put_eye_data_in_buf(ON);
    pencode(TRIAL_START);
    pencode(START_EYE_DATA);
    pencode(BASE_TRIAL_NUM + my_trial_num);
    my_trial_num = my_trial_num + 1;

    //pdata(ON);
  
    cnd=BLOCKget_cond_num();
    pencode(CONDNUM+cnd);
    blk=BLOCKget_block_num();
    pencode(BLOCKNUM+blk);
  
    testnum = random(1, maxtestdum);
    pencode(NONMATCHNUM + testnum);

    set_timer(ititim);
    while (timer_expired() == 0){
    }
    goto wait_bar;
  }
 
  wait_bar: {
    set_timer(waibar);
    pencode(START_WAIT_LEVER);
    while (timer_expired() == 0) {
      if(get_bar_state() ==1){
        pencode(BAR_DOWN);
        Mprintf(2,"Bar = 1");
        Mprintf(3,"BAR: Down"); 
        pencode(END_WAIT_LEVER);
        goto put_fix_spot;
      }
      if (KeyPressed()){
        do_keypress();
      }
    }
    response_no_bar_down(8);
    pencode(ENC_NO_BAR_DOWN);
    goto error;
  }

  put_fix_spot: {
    display_fixspot(1);
    if (x<5){
      x=400;
    }
    if (y<5){
      y=400;
    }
    set_fixwin_params(0,x/5,y/5);
    SCREENdraw_entire_screen();
    pencode(TURN_FIXSPOT_ON);
    goto wait_fixation;
  }
 
  wait_fixation: {
    set_timer(waifix);
    pencode(START_WAIT_FIXATION);
    while (timer_expired() == 0) {
      if(get_fixation_state() == 1) {
        pencode(FIXATION_OCCURS);
        goto test1;
      }
      if(get_bar_state() == 0){
        response_before_test(7);
        pencode(ENC_RESP_BEFORE_TEST);
        goto error;
      }
      if (KeyPressed()){
        do_keypress();
      }
    }
    no_fixation();
    pencode(ENC_NO_FIXATION);
    goto time_out;
  }
 
  ///////Display Sample///////
  test1: {
    int   i;
    int   i2;
    //----get fixation
    set_timer(required_fixation);
    while (timer_expired() == 0){
      if(get_bar_state() == 0){
        response_before_test(7);
        pencode(ENC_RESP_BEFORE_TEST);
        goto error;
      }
      if(get_fixation_state() == 0){
        break_fixation_error();
        pencode(ENC_BREAK_FIX_ERROR);
        goto error;
      }
      if (KeyPressed()){
        do_keypress();
      }
    }
    display_test(0,1);  
    pencode(TURN_TEST0_ON);

    set_timer(stimtim);
    while (timer_expired() == 0){
      if(get_bar_state() == 0){
        pencode(ENC_RESP_EARLY);
        response_early(5);
        display_test(0,0); 
        pencode(TURN_TEST0_OFF);                               
        goto error;
      }
      if(get_fixation_state() == 0){
        pencode(ENC_BREAK_FIX_ERROR);
        break_fixation_error();
        display_test(0,0);
        pencode(TURN_TEST0_OFF); 
        goto error;
      }
      if (KeyPressed()){
        do_keypress();
      }
    }
    display_test(0,0);
    pencode(TURN_TEST0_OFF);

    if (testnum == 1) {
      goto match;
    }
    goto nonmatch;
  }

  ///////display nonmatch///////

  nonmatch: {
    stimnum=random(minstim, maxstim);
    if(stimnum==1){
      if(stim1rep==2){
        goto nonmatch;
      }
    }
    if(stimnum==2){
      if(stim2rep==2){
        goto nonmatch;
      }
    }
    if(stimnum==3){ 
      if(stim3rep==2){
        goto nonmatch;
      }
    }
    if(stimnum==4){
      if(stim4rep==2){
        goto nonmatch;
      }
    }
    if(stimnum==5){
      if(stim5rep==2){
        goto nonmatch;
      }
    }
  
    set_timer(timdelay);
    while (timer_expired() == 0) {
      if(get_bar_state() == 0){
        pencode(ENC_RESP_EARLY);
        response_early(5);
        goto error;
      }

      if(get_fixation_state() == 0){
        pencode(ENC_BREAK_FIX_ERROR);
        break_fixation_error();
        goto error;
      }
      if (KeyPressed()){
        do_keypress();
      }
    }

    display_test(stimnum,1);
   
    if (stimnum == 1) {
      stim1rep=stim1rep+1;
      pencode(TURN_TEST1_ON);
    }
    if (stimnum == 2) {
      stim2rep=stim2rep+1;
      pencode(TURN_TEST2_ON);
    }
    if (stimnum == 3) {
      stim3rep=stim3rep+1;
      pencode(TURN_TEST3_ON);
    }
    if (stimnum == 4) {
      stim4rep=stim4rep+1;
      pencode(TURN_TEST4_ON);
    }
    if (stimnum == 5) {
      stim5rep=stim5rep+1;
      pencode(TURN_TEST5_ON);
    }

    set_timer(stimtim);
    while (timer_expired() == 0){
      if(get_bar_state() == 0){
        pencode(ENC_RESP_EARLY);
        response_early(5);
        display_test(stimnum,0); 
    
        if (stimnum == 1) {
          pencode(TURN_TEST1_OFF);
        }
        if (stimnum == 2) {
          pencode(TURN_TEST2_OFF);
        }
        if (stimnum == 3) {
          pencode(TURN_TEST3_OFF);
        }
        if (stimnum == 4) {
          pencode(TURN_TEST4_OFF);
        }
        if (stimnum == 5) {
          pencode(TURN_TEST5_OFF);
        }
        goto error;
      }

      if(get_fixation_state() == 0){
        pencode(ENC_BREAK_FIX_ERROR);
        break_fixation_error();
        display_test(stimnum,0);
    
        if (stimnum == 1) {
          pencode(TURN_TEST1_OFF);
        }
        if (stimnum == 2) {
          pencode(TURN_TEST2_OFF);
        }
        if (stimnum == 3) {
          pencode(TURN_TEST3_OFF);
        }
        if (stimnum == 4) {
          pencode(TURN_TEST4_OFF);
        }
        if (stimnum == 5) {
          pencode(TURN_TEST5_OFF);
        }

        goto error;
      }
      if (KeyPressed()){
        do_keypress();
      }
    }
  
    display_test(stimnum,0);
    
    if (stimnum == 1) {
      pencode(TURN_TEST1_OFF);
    }
    if (stimnum == 2) {
      pencode(TURN_TEST2_OFF);
    }
    if (stimnum == 3) {
      pencode(TURN_TEST3_OFF);
    }
    if (stimnum == 4) {
      pencode(TURN_TEST4_OFF);
    }
    if (stimnum == 5) {
      pencode(TURN_TEST5_OFF);
    }

    testnum=testnum-1;
    if (testnum>=2) {
      goto nonmatch;
    }

    goto match;
  }

  /////display match///////
  match: {
    set_timer(timdelay);
    while (timer_expired() == 0) {
      if(get_bar_state() == 0){
        pencode(ENC_RESP_EARLY);
        response_early(5);
        goto error;
      }

      if(get_fixation_state() == 0){
        pencode(ENC_BREAK_FIX_ERROR);
        break_fixation_error();
        goto error;
      }
      if (KeyPressed()){
        do_keypress();
      }
    }

    display_test(0,1);
    pencode(TURN_TEST0_ON);
    

    //----begin of deadtime
    set_timer(deadtime);
    while (timer_expired() == 0){
      if(get_bar_state() == 0){
        pencode(ENC_RESP_EARLY);
        response_early(5);
        display_test(0, 0);  
        pencode(TURN_TEST0_OFF);                 
        goto error;
      }
      if(get_fixation_state() == 0){
        pencode(ENC_BREAK_FIX_ERROR);
        break_fixation_error();
        display_test(0,0);
        pencode(TURN_TEST0_OFF); 
        goto error;
      }
      if (KeyPressed()){
        do_keypress();
      }
    }

    //----end of deadtime
 
    //-----wait for reaction
    set_timer(stimtim-deadtime);
    while (timer_expired() == 0){
      if(get_bar_state() == 0){
        response_correct(0);
        pencode(BAR_UP);
        pencode(ENC_RESP_CORRECT);
        display_test(0,0);
        pencode(TURN_TEST0_OFF); 
        goto finish_up2;
      }
      if(get_fixation_state() == 0){
        break_fixation_error();
        pencode(ENC_BREAK_FIX_ERROR);
        display_test(0,0);
        pencode(TURN_TEST0_OFF); 
        goto error;
      }
      if (KeyPressed()){
        do_keypress();
      }
    }
    display_test(0,0);  
    pencode(TURN_TEST0_OFF);                
  
    set_timer(maxrsptim-stimtim);
    while (timer_expired() == 0){
      if(get_bar_state() == 0){
        response_correct(0);
        pencode(BAR_UP);
        pencode(ENC_RESP_CORRECT);
        goto finish_up2;
      }
      if (KeyPressed()){
        do_keypress();
      }
    }

    pencode(ENC_RESP_LATE);
    response_late(2);  
    goto error;
  }

  //----end of wait for response
 
  finish_up2: {
    int   i;
    display_fixspot(0);
    for (i=0;i<NUM_REWARDS;i++){
      reward();
      pencode(REWARD);
      MS_TIMERset(PAUSE_TIMER,REWARD_PAUSE_TIME);
      while(MS_TIMERcheck(PAUSE_TIMER)) {}
    }
    end_trial();
    put_eye_data_in_buf(OFF);
    pencode(END_EYE_DATA);
    display_eye_path(OFF);
    pencode(TRIAL_END);

    return;
  }

  error: {
    display_fixspot(0);
    set_timer(timeout);
    while(timer_expired() == 0){
    }
    goto time_out;
  }

  time_out:  {
    display_fixspot(0);
    set_timer(timeout);
    while(timer_expired() == 0){
    }
    end_trial();
    put_eye_data_in_buf(OFF);
    pencode(END_EYE_DATA);
    display_eye_path(OFF);
    pencode(TRIAL_END);

    return;
  }
}

void do_keypress()
{
  switch ((char)GetAKey()) {
    case K_ESCAPE: return;
    case '-': x=x-5; y=y-5; break;
    case '=': x=x+5; y=y+5; break;
    case '0': x=200; y=200; break;
  }
  if (x<5){
    x=5;
  }
  if (y<5){
    y=5;
  }
  set_fixwin_params(0,100,100);
}

void do_iti()
{
  int i;
  pencode(START_PRE_TRIAL);
  MS_TIMERset(ITI_TIMER,ITI_TIME);
  while (MS_TIMERcheck(ITI_TIMER)){}
  pencode(END_PRE_TRIAL);
}

//void pdata(int toggle) 
//{
//  if (USE_INPBSY){
//      while(DEVinp(PLEXON_DEV,PLEXON_PORT_CTRL) & PLEXON_INPBSY);
//   }
//   if (toggle)
//   {
//     wait(2);
//     DEVoutp(PLEXON_DEV,PLEXON_PORT_CTRL,PLEXON_DATA_ON);
//     wait(2);
//   }
//   else
//   {
//     wait(2);
//     DEVoutp(PLEXON_DEV,PLEXON_PORT_CTRL,PLEXON_DATA_OFF);
//   }
//}

//////* Plexon funcs *//////
void pencode(int encode_number)
{
   int inpbsy_begin,inpbsy_end;

   inpbsy_begin= (DEVinp(PLEXON_DEV,PLEXON_PORT_CTRL) & PLEXON_INPBSY);

   if (USE_INPBSY){
      while(DEVinp(PLEXON_DEV,PLEXON_PORT_CTRL) & PLEXON_INPBSY);
   }
   // insert NOP code if this is a repeat of the last event code
   //if (encode_number == prior_event_code){
   //   encode(NOP);
   //   DEVoutp(PLEXON_DEV,PLEXON_PORT_LSB,(NOP & 0xFF));        // low byte
   //   DEVoutp(PLEXON_DEV,PLEXON_PORT_MSB,((NOP >> 8) & 0x7F)); // high byte
   //   DEVoutp(PLEXON_DEV,PLEXON_PORT_CTRL,PLEXON_STROBE_BIT | PLEXON_DATA_ON);  // toggle strobe
   //   DEVoutp(PLEXON_DEV,PLEXON_PORT_CTRL,PLEXON_STROBE_OFF | PLEXON_DATA_ON); 
   //   if (USE_INPBSY) {
   //      while(DEVinp(PLEXON_DEV,PLEXON_PORT_CTRL) & PLEXON_INPBSY);
   //   }     
   //   else {
   //      MS_TIMERset(PENCODE_TIMER,2);
   //      while(MS_TIMERcheck(PENCODE_TIMER));
   //   }
   //}
   encode(encode_number);
   DEVoutp(PLEXON_DEV,PLEXON_PORT_LSB,(encode_number & 0xFF));        // low byte
   DEVoutp(PLEXON_DEV,PLEXON_PORT_MSB,((encode_number >> 8) & 0x7F)); // high byte
   DEVoutp(PLEXON_DEV,PLEXON_PORT_CTRL,PLEXON_STROBE_BIT | PLEXON_DATA_ON);            // toggle strobe
   DEVoutp(PLEXON_DEV,PLEXON_PORT_CTRL,PLEXON_STROBE_OFF | PLEXON_DATA_ON);
   if (USE_INPBSY) {      
      MS_TIMERset(PENCODE_TIMER,1);
      while(MS_TIMERcheck(PENCODE_TIMER));
   }
   prior_event_code=encode_number;
   inpbsy_end= (DEVinp(PLEXON_DEV,PLEXON_PORT_CTRL) & PLEXON_INPBSY);
   Mprintf(5," INPBSY=%d  %d; ",inpbsy_begin,inpbsy_end);
} 

void wait(int ms)
{
  MS_TIMERset(WAIT_TIMER,ms);
  while (MS_TIMERcheck(WAIT_TIMER)) ;
}

