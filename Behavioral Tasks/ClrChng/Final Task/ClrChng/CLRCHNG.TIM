#include "css_inc.h"
#include "encodes.h"

#define init_done           _int1   
#define my_trial_num        _int2

#define NUM_REWARDS                     5
#define ITI_TIME                        1000
#define REWARD_PAUSE_TIME               200

#define ITI_TIMER                       4
#define PAUSE_TIMER                     6
#define WAIT_TIMER                      9  //8 is used by plexon funcs!!!

#define ititim                          1000                 
#define waibar                          10000
#define waifix                          3000
#define required_fixation               0
#define mintim                          500
#define maxtim                          1500
#define deadtime                        150
#define maxrsptim                       500 
#define timeout                         10

/* Plexon defs */
#define NOP                0     // No Operation encode.
#define TRUE               1
#define FALSE              0
#define USE_INPBSY         FALSE // True? False?
#define PLEXON_DEV         1     // device number as given by order listed cortex.cfg. The nth device is device number n-1
#define PLEXON_PORT_LSB    0x00  // output: low byte for plexon
#define PLEXON_PORT_MSB    0x01  // output: high byte (7 bits) for plexon
#define PLEXON_PORT_CTRL   0x02  // low bye (strobe output), hi byte (busy input)
#define ConfigPort         0x03  // Configures port for input and output, see below
#define PLEXON_STROBE_BIT  0x01  // Strobe bit (output)
#define PLEXON_STROBE_OFF  0x00  // Strobe bit off
#define PLEXON_DATA_ON     0x02  // keep high while recording data
#define PLEXON_DATA_OFF    0x00  // pause plexon data recording
#define PLEXON_INPBSY      0x10  // Busy Bit (input). bit mask used for determining state of plexon word read (busy or not)
#define PENCODE_TIMER      8   

#define BASE_TRIAL_NUM     0

void do_keypress();
void do_iti();

/* plexon func predefs */
void pencode(int encode_number);
//void pdata(int toggle); //turn plexon data recording on/off [0/1]
void wait(int ms);


int cnd;
int blk;
int rant_1;
int rant_2;

int prior_event_code;

float  x=0.0, y=0.0;
int    init=6;

main(){

iti: {

do_iti();
	if (init_done == 0) {
	   init_done = 1;
	   my_trial_num = 1;
    DEVoutp(PLEXON_DEV, ConfigPort, 0x88); /* configures A & B ports of the cio/dio24 card to output, upper C port is input, lower Cport is output */
    DEVoutp(PLEXON_DEV, PLEXON_PORT_CTRL, 0x00); /* sets pin 1 of PLEXON_PORT_CTRL (the strobe port) to zero */
	}

clear_eog();
display_eye_path(ON);
put_eye_data_in_buf(ON);
pencode(TRIAL_START);
pencode(START_EYE_DATA);
pencode(BASE_TRIAL_NUM + my_trial_num);
my_trial_num = my_trial_num + 1;


//pdata(ON);



  
  cnd=BLOCKget_cond_num();
  pencode(CONDNUM+cnd);
  blk=BLOCKget_block_num();
  pencode(BLOCKNUM+blk);

  set_timer(ititim);
  while (timer_expired() == 0){
    if (KeyPressed()){
	do_keypress();
	}
  }
  goto wait_bar;
 }
 
 wait_bar: {
  set_timer(waibar);
  pencode(START_WAIT_LEVER);
  while (timer_expired() == 0) {
    if (KeyPressed()){
	do_keypress();
	}               
    if(get_bar_state() ==1){
    pencode(BAR_DOWN);
    Mprintf(3,"Bar = 1");
    Mprintf(4,"BAR: Down"); 
    pencode(END_WAIT_LEVER);
    goto put_fix_spot;
   }
  }
  response_no_bar_down(8);
  pencode(ENC_NO_BAR_DOWN);
  goto error;
 }
 
put_fix_spot: {
  Mprintf(1, "");
  display_fixspot(1);
  pencode(TURN_FIXSPOT_ON);
  goto wait_fixation;
 }
 
 wait_fixation: {
  set_timer(waifix);
  pencode(START_WAIT_FIXATION);
  while (timer_expired() == 0) {
   if(get_fixation_state() == 1) {
    pencode(FIXATION_OCCURS);
    goto test1;
   }
   if(get_bar_state() == 0){
    response_before_test(7);
    pencode(ENC_RESP_BEFORE_TEST);
    goto error;
   }
  }
  no_fixation();
  pencode(ENC_NO_FIXATION);
  goto time_out;
 }
 
 test1: {
  int   i;
  int   i2;
  int   timdum;

 //----get fixation
  set_timer(required_fixation);
  while (timer_expired() == 0){
   if(get_bar_state() == 0){
    response_before_test(7);
    pencode(ENC_RESP_BEFORE_TEST);
    goto error;
   }
   if(get_fixation_state() == 0){
    break_fixation_error();
    pencode(ENC_BREAK_FIX_ERROR);
    goto time_out;
   }
  }

//----end of get fixation

  display_test(0,1);  
  pencode(TURN_TEST0_ON);
  display_fixspot(0); 
  pencode(TURN_FIXSPOT_OFF); 
  
  timdum=random(mintim,maxtim);
  set_timer(timdum);
  while (timer_expired() == 0){
   if(get_bar_state() == 0){
    pencode(ENC_RESP_EARLY);
    response_early(5);
    display_test(0, 0); 
    pencode(TURN_TEST0_OFF);                               
    goto error;
   }

   if(get_fixation_state() == 0){
    pencode(ENC_BREAK_FIX_ERROR);
    break_fixation_error();
    display_test(0,0);
    pencode(TURN_TEST0_OFF); 
    goto time_out;
     }
  }
  
  display_test(1,1);
  pencode(TURN_TEST1_ON); 
  display_test(0,0);
  pencode(TURN_TEST0_OFF); 
  

//----begin of deadtime
  set_timer(deadtime);
  while (timer_expired() == 0){
   if(get_bar_state() == 0){
    pencode(ENC_RESP_EARLY);
    response_early(5);
    display_test(1, 0);  
    pencode(TURN_TEST1_OFF);                 
    goto error;
   }
   if(get_fixation_state() == 0){
    pencode(ENC_BREAK_FIX_ERROR);
    break_fixation_error();
    display_test(1,0);
    pencode(TURN_TEST1_OFF); 
    goto time_out;
   }
  }

//----end of deadtime
 
//-----wait for reaction
  set_timer(maxrsptim-deadtime);
  while (timer_expired() == 0){
   if(get_bar_state() == 0){
    response_correct(0);
    pencode(BAR_UP);
    pencode(ENC_RESP_CORRECT);
    display_test(1, 0);
    pencode(TURN_TEST1_OFF); 
    goto finish_up2;
   }
   if(get_fixation_state() == 0){
    break_fixation_error();
    pencode(ENC_BREAK_FIX_ERROR);
    display_test(1,0);
    pencode(TURN_TEST1_OFF); 
    goto time_out;
   }
  }
  pencode(ENC_RESP_LATE);
  response_late(2);  
  display_test(1, 0);  
  pencode(TURN_TEST1_OFF);                
  goto error;
 }
//----end of wait for response
 
 finish_up2: {
  int   i;
  display_fixspot(0);
  for (i=0;i<NUM_REWARDS;i++){
   reward();
   pencode(REWARD);
   MS_TIMERset(PAUSE_TIMER,REWARD_PAUSE_TIME);
   while(MS_TIMERcheck(PAUSE_TIMER)) {}
  }
  end_trial();
  put_eye_data_in_buf(OFF);
  pencode(END_EYE_DATA);
  display_eye_path(OFF);
  pencode(TRIAL_END);


  return;
 }
 
 error: {
 
  display_fixspot(0);
  set_timer(timeout);
  while(timer_expired() == 0);    
  goto time_out;
 }
 
 time_out:  {
  display_fixspot(0);
  set_timer(timeout);
  while(timer_expired() == 0);    
  end_trial();
  put_eye_data_in_buf(OFF);
  pencode(END_EYE_DATA);
  display_eye_path(OFF);
  pencode(TRIAL_END);
  
  return;
 }
}

void do_keypress()
{
			switch ((char)GetAKey()) {
				case  27: Mprintf(1, "PRESS KEY: got escape");return;   /* 27 = Esc */
				case '0': Mprintf(1, "PRESS KEY: got a 0");x=999; break;

			//must put NUMLOCK ON to use these defines cases///
			case VK_NUMPAD1: Mprintf(1, "PRESS KEY: got a NUMPAD1");x=-init; y=-init; break;
			case VK_NUMPAD2: Mprintf(1, "PRESS KEY: got a NUMPAD2");x=0.0; y=-init; break;
			case VK_NUMPAD3: Mprintf(1, "PRESS KEY: got a NUMPAD3");x= init; y=-init; break;
			case VK_NUMPAD4: Mprintf(1, "PRESS KEY: got a NUMPAD4");x=-init; y=0.0; break;
			case VK_NUMPAD5: Mprintf(1, "PRESS KEY: got a NUMPAD5");x=0.0; y=0.0; break;
			case VK_NUMPAD6: Mprintf(1, "PRESS KEY: got a NUMPAD6");x= init; y=0.0; break;
			case VK_NUMPAD7: Mprintf(1, "PRESS KEY: got a NUMPAD7");x=-init; y= init; break;
			case VK_NUMPAD8: Mprintf(1, "PRESS KEY: got a NUMPAD8");x=0.0; y= init; break;
			case VK_NUMPAD9: Mprintf(1, "PRESS KEY: got a NUMPAD9");x= init; y= init; break;


		case '1': Mprintf(1, "PRESS KEY: got a 1");x=-init; y=-init; break;
		case '2': Mprintf(1, "PRESS KEY: got a 2");x= 0.0; y=-init; break;
		case '3': Mprintf(1, "PRESS KEY: got a 3");x= init; y=-init; break;
		case '4': Mprintf(1, "PRESS KEY: got a 4");x=-init; y= 0.0; break;
		    case '5': Mprintf(1, "PRESS KEY: got a 5");x= 0.0; y= 0.0; break;
		case '6': Mprintf(1, "PRESS KEY: got a 6");x= init; y= 0.0; break;
		case '7': Mprintf(1, "PRESS KEY: got a 7");x=-init; y= init; break;
		case '8': Mprintf(1, "PRESS KEY: got a 8");x= 0.0; y= init; break;
		case '9': Mprintf(1, "PRESS KEY: got a 9");x= init; y= init; break;
				default : Mprintf(1, "default");x= 0.0; y= 0.0; beep;
			}
		
		if(x<999){
	    clear_eog();
			GmoveABS(FIXSPOT,x,y);
			GmoveABS(TEST0,x,y);
			GmoveABS(TEST1,x,y);
			Gflush(1);

Mprintf(2,"TARGET  X= %.1f     Y= %.1f", x, y);
		}
}

void do_iti()
{
  int i;
  pencode(START_PRE_TRIAL);
  Mprintf(1, "PRESS KEY");
  MS_TIMERset(ITI_TIMER,ITI_TIME);
  while (MS_TIMERcheck(ITI_TIMER)){
	if (KeyPressed()){
		do_keypress();
		}
  }
  pencode(END_PRE_TRIAL);
}

//void pdata(int toggle) 
//{
//  if (USE_INPBSY){
//      while(DEVinp(PLEXON_DEV,PLEXON_PORT_CTRL) & PLEXON_INPBSY);
//   }
//   if (toggle)
//   {
//     wait(2);
//     DEVoutp(PLEXON_DEV,PLEXON_PORT_CTRL,PLEXON_DATA_ON);
//     wait(2);
//   }
//   else
//   {
//     wait(2);
//     DEVoutp(PLEXON_DEV,PLEXON_PORT_CTRL,PLEXON_DATA_OFF);
//   }
//}

//////* Plexon funcs *//////
void pencode(int encode_number)
{
   int inpbsy_begin,inpbsy_end;

   inpbsy_begin= (DEVinp(PLEXON_DEV,PLEXON_PORT_CTRL) & PLEXON_INPBSY);

   if (USE_INPBSY){
      while(DEVinp(PLEXON_DEV,PLEXON_PORT_CTRL) & PLEXON_INPBSY);
   }
   // insert NOP code if this is a repeat of the last event code
   //if (encode_number == prior_event_code){
   //   encode(NOP);
   //   DEVoutp(PLEXON_DEV,PLEXON_PORT_LSB,(NOP & 0xFF));        // low byte
   //   DEVoutp(PLEXON_DEV,PLEXON_PORT_MSB,((NOP >> 8) & 0x7F)); // high byte
   //   DEVoutp(PLEXON_DEV,PLEXON_PORT_CTRL,PLEXON_STROBE_BIT | PLEXON_DATA_ON);  // toggle strobe
   //   DEVoutp(PLEXON_DEV,PLEXON_PORT_CTRL,PLEXON_STROBE_OFF | PLEXON_DATA_ON); 
   //   if (USE_INPBSY) {
   //      while(DEVinp(PLEXON_DEV,PLEXON_PORT_CTRL) & PLEXON_INPBSY);
   //   }     
   //   else {
   //      MS_TIMERset(PENCODE_TIMER,2);
   //      while(MS_TIMERcheck(PENCODE_TIMER));
   //   }
   //}
   encode(encode_number);
   DEVoutp(PLEXON_DEV,PLEXON_PORT_LSB,(encode_number & 0xFF));        // low byte
   DEVoutp(PLEXON_DEV,PLEXON_PORT_MSB,((encode_number >> 8) & 0x7F)); // high byte
   DEVoutp(PLEXON_DEV,PLEXON_PORT_CTRL,PLEXON_STROBE_BIT | PLEXON_DATA_ON);            // toggle strobe
   DEVoutp(PLEXON_DEV,PLEXON_PORT_CTRL,PLEXON_STROBE_OFF | PLEXON_DATA_ON);
   if (USE_INPBSY) {      
      MS_TIMERset(PENCODE_TIMER,1);
      while(MS_TIMERcheck(PENCODE_TIMER));
   }
   prior_event_code=encode_number;
   inpbsy_end= (DEVinp(PLEXON_DEV,PLEXON_PORT_CTRL) & PLEXON_INPBSY);
   Mprintf(5," INPBSY=%d  %d; ",inpbsy_begin,inpbsy_end);
} 

void wait(int ms)
{
  MS_TIMERset(WAIT_TIMER,ms);
  while (MS_TIMERcheck(WAIT_TIMER)) ;
}

